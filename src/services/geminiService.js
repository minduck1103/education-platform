import { GoogleGenerativeAI } from '@google/generative-ai';
import { GEMINI_CONFIG, validateApiKey } from '../config/gemini';

// Kh·ªüi t·∫°o Gemini client
const genAI = new GoogleGenerativeAI(GEMINI_CONFIG.apiKey);

// Check API key on initialization
if (!validateApiKey(GEMINI_CONFIG.apiKey)) {
  console.warn(`
üö® GEMINI API KEY CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH ƒê√öNG C√ÅCH!

üìã H∆∞·ªõng d·∫´n setup:
1. T·∫°o file .env trong th∆∞ m·ª•c education-platform-app/
2. Th√™m d√≤ng: VITE_GEMINI_API_KEY=your_api_key_here
3. L·∫•y API key t·ª´: https://aistudio.google.com/app/apikey
4. Restart development server

üí° Chatbot s·∫Ω s·ª≠ d·ª•ng fallback responses khi kh√¥ng c√≥ API key h·ª£p l·ªá.
  `);
}

// T·∫°o prompt cho g·ª£i √Ω kh√≥a h·ªçc
const createSuggestionPrompt = (userProfile, availableCourses) => {
  const { viewHistory, favorites, categories } = userProfile;
  
  return `
B·∫°n l√† m·ªôt AI chuy√™n gia v·ªÅ gi√°o d·ª•c, nhi·ªám v·ª• c·ªßa b·∫°n l√† g·ª£i √Ω kh√≥a h·ªçc ph√π h·ª£p cho h·ªçc vi√™n.

TH√îNG TIN H·ªåC VI√äN:
- C√°c kh√≥a h·ªçc ƒë√£ xem: ${viewHistory.map(course => `"${course.name}" (${course.category})`).join(', ')}
- C√°c kh√≥a h·ªçc y√™u th√≠ch: ${favorites.map(course => `"${course.name}" (${course.category})`).join(', ')}
- C√°c danh m·ª•c quan t√¢m: ${categories.join(', ')}

C√ÅC KH√ìA H·ªåC C√ì S·∫¥N:
${availableCourses.map(course => 
  `ID: ${course.id} | "${course.name}" - ${course.category} - ${course.price.toLocaleString('vi-VN')}ƒë - ${course.level}`
).join('\n')}

Y√äU C·∫¶U:
1. Ph√¢n t√≠ch s·ªü th√≠ch c·ªßa h·ªçc vi√™n d·ª±a tr√™n l·ªãch s·ª≠ xem v√† y√™u th√≠ch
2. G·ª£i √Ω 3-5 kh√≥a h·ªçc ph√π h·ª£p nh·∫•t (kh√¥ng g·ª£i √Ω kh√≥a h·ªçc ƒë√£ y√™u th√≠ch)
3. ∆Øu ti√™n c√°c kh√≥a h·ªçc c√πng danh m·ª•c ho·∫∑c li√™n quan
4. Tr·∫£ v·ªÅ CH√çNH X√ÅC theo format JSON sau:

{
  "suggestions": [
    {
      "courseId": "course_001",
      "reason": "L√Ω do g·ª£i √Ω ng·∫Øn g·ªçn",
      "confidence": 0.95
    }
  ],
  "analysis": "Ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ s·ªü th√≠ch h·ªçc vi√™n"
}

QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text n√†o kh√°c.`;
};

// G·ª£i √Ω kh√≥a h·ªçc b·∫±ng AI
export const getAICourseSuggestions = async (userProfile, availableCourses) => {
  try {
    // Ki·ªÉm tra API key
    if (!validateApiKey(GEMINI_CONFIG.apiKey)) {
      return getFallbackSuggestions(userProfile, availableCourses);
    }

    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ fallback
    if (!userProfile.viewHistory.length && !userProfile.favorites.length) {
      return getFallbackSuggestions(userProfile, availableCourses);
    }

    // Debug: Log API key ƒë·ªÉ ki·ªÉm tra
    console.log('üîë Suggestions API Key being used:', GEMINI_CONFIG.apiKey?.substring(0, 10) + '...');
    
    // Kh·ªüi t·∫°o l·∫°i genAI v·ªõi API key hi·ªán t·∫°i
    const currentGenAI = new GoogleGenerativeAI(GEMINI_CONFIG.apiKey);
    const model = currentGenAI.getGenerativeModel({ 
      model: GEMINI_CONFIG.model,
      generationConfig: GEMINI_CONFIG.generationConfig,
      safetySettings: GEMINI_CONFIG.safetySettings
    });

    // T·∫°o prompt
    const prompt = createSuggestionPrompt(userProfile, availableCourses);

    // G·ªçi API
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Parse JSON response
    const cleanedText = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    const aiResponse = JSON.parse(cleanedText);

    // Validate response structure
    if (!aiResponse.suggestions || !Array.isArray(aiResponse.suggestions)) {
      return getFallbackSuggestions(userProfile, availableCourses);
    }

    // Map courseId to actual course objects
    const suggestions = aiResponse.suggestions
      .map(suggestion => {
        const course = availableCourses.find(c => c.id === suggestion.courseId);
        return course ? { ...course, aiReason: suggestion.reason, confidence: suggestion.confidence } : null;
      })
      .filter(Boolean)
      .slice(0, 5);

    return {
      suggestions,
      analysis: aiResponse.analysis,
      reason: 'G·ª£i √Ω ƒë∆∞·ª£c t·∫°o b·ªüi AI d·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n',
      confidence: suggestions.length > 0 ? suggestions[0].confidence : 0.5,
      usedAI: true,
      usedFallback: false
    };

  } catch (error) {
    console.error('Error getting AI suggestions:', error);
    return getFallbackSuggestions(userProfile, availableCourses);
  }
};

// Fallback suggestions when AI fails
const getFallbackSuggestions = (userProfile, availableCourses) => {
  const { viewHistory, favorites, categories } = userProfile;
  
  // Get favorite course IDs
  const favoriteIds = favorites.map(fav => fav.id);
  
  // Filter out already favorited courses
  const candidateCourses = availableCourses.filter(course => 
    !favoriteIds.includes(course.id)
  );
  
  // Priority 1: Same categories as viewed/favorited courses
  const relatedCourses = candidateCourses.filter(course => 
    categories.includes(course.category)
  );
  
  // Priority 2: Popular courses (high rating)
  const popularCourses = candidateCourses
    .filter(course => course.rating >= 4.5)
    .sort((a, b) => b.rating - a.rating);
  
  // Combine and deduplicate
  const suggestions = [...relatedCourses, ...popularCourses]
    .filter((course, index, self) => self.findIndex(c => c.id === course.id) === index)
    .slice(0, 5);

  return {
    suggestions,
    analysis: categories.length > 0 ? 
      `D·ª±a tr√™n s·ªü th√≠ch v·ªÅ ${categories.join(', ')}, ch√∫ng t√¥i g·ª£i √Ω nh·ªØng kh√≥a h·ªçc t∆∞∆°ng t·ª±.` :
      'Ch√∫ng t√¥i g·ª£i √Ω nh·ªØng kh√≥a h·ªçc ph·ªï bi·∫øn v√† ch·∫•t l∆∞·ª£ng cao.',
    reason: 'G·ª£i √Ω d·ª±a tr√™n danh m·ª•c quan t√¢m v√† ƒë·ªô ph·ªï bi·∫øn',
    confidence: 0.7,
    usedAI: false,
    usedFallback: true
  };
};

// Chatbot response function
export const getChatbotResponse = async (prompt) => {
  try {
    // T·∫°m th·ªùi disable AI chatbot ƒë·ªÉ s·ª≠ d·ª•ng fallback responses
    console.warn('‚ö†Ô∏è AI Chatbot t·∫°m th·ªùi disabled. S·ª≠ d·ª•ng fallback responses.');
    return null;
    
    // Validate API key first
    if (!validateApiKey(GEMINI_CONFIG.apiKey)) {
      console.warn('‚ö†Ô∏è Gemini API key kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Chatbot s·∫Ω s·ª≠ d·ª•ng fallback responses.');
      // Return null to trigger fallback in chatbotService
      return null;
    }

    // Debug: Log API key ƒë·ªÉ ki·ªÉm tra
    console.log('üîë Chatbot API Key being used:', GEMINI_CONFIG.apiKey?.substring(0, 10) + '...');
    
    // Kh·ªüi t·∫°o l·∫°i genAI v·ªõi API key hi·ªán t·∫°i
    const currentGenAI = new GoogleGenerativeAI(GEMINI_CONFIG.apiKey);
    const model = currentGenAI.getGenerativeModel({ 
      model: GEMINI_CONFIG.model,
      generationConfig: GEMINI_CONFIG.generationConfig,
      safetySettings: GEMINI_CONFIG.safetySettings
    });
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    if (!text || text.trim() === '') {
      throw new Error('Empty response from Gemini API');
    }
    
    return text.trim();
  } catch (error) {
    console.error('Gemini chatbot error:', error);
    throw error;
  }
};

export default {
  getAICourseSuggestions,
  getChatbotResponse
}; 